server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle config.js - should not be cached
    location = /config.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # API proxy - route API calls to backend (only if BACKEND_URL is set)
    location /api/ {
        # Use resolver for dynamic proxy_pass
        resolver 127.0.0.11 valid=30s;
        
        # Only proxy if BACKEND_URL is configured
        set $backend_url "${BACKEND_URL}";
        
        if ($backend_url = "") {
            return 503 "Backend URL not configured";
        }
        
        proxy_pass $backend_url/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        
        # Handle proxy errors gracefully
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_error;
    }
    
    # Error handling for API proxy
    location @api_error {
        add_header Content-Type application/json always;
        return 503 '{"error": "Backend service unavailable", "message": "API service is not responding"}';
    }

    # Main location block for serving static files
    location / {
        try_files $uri $uri/ @fallback;
    }
    
    # Fallback for client-side routing
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # Prevent caching of index.html
    location = /index.html {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Add error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}